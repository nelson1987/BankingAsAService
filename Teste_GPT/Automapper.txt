Implemente um mapeamento entre classes utilizando  Automapper
Para implementar um mapeamento entre classes utilizando o AutoMapper, você precisará primeiro instalar o pacote AutoMapper em seu projeto, usando o gerenciador de pacotes de sua escolha (como o NuGet). Em seguida, você pode configurar o mapeamento entre suas classes da seguinte maneira:

Crie uma classe de configuração de mapeamento:
Copy code
public class AutoMapperProfile : Profile
{
    public AutoMapperProfile()
    {
        CreateMap<Origem, Destino>();
    }
}
Inicialize o AutoMapper no início do seu aplicativo:
Copy code
AutoMapper.Mapper.Initialize(cfg =>
{
    cfg.AddProfile<AutoMapperProfile>();
});
Utilize o método Map para fazer o mapeamento entre as classes:
Copy code
Destino destino = AutoMapper.Mapper.Map<Destino>(origem);
Nota: é importante que as propriedades dos objetos tenham os mesmos nomes e tipos para que o mapeamento funcione corretamente.




Nelson Neto
Crie exemplos de requestbody no Swagger 
Aqui estão alguns exemplos de como você pode adicionar um corpo de solicitação (request body) no Swagger:

Utilizando o atributo [FromBody] no parâmetro da sua action:
Copy code
[HttpPost]
public IActionResult Create([FromBody] CreateProductRequest request)
{
    // ...
}
Utilizando o atributo [SwaggerRequestExample] para adicionar um exemplo no swagger:
Copy code
[HttpPost]
[SwaggerRequestExample(typeof(CreateProductRequest), typeof(CreateProductRequestExample))]
public IActionResult Create([FromBody] CreateProductRequest request)
{
    // ...
}
Utilizando o método AddSwaggerExamples para adicionar exemplos no swagger:
Copy code
public void ConfigureServices(IServiceCollection services)
{
    services.AddSwaggerExamplesFromAssemblyOf<CreateProductRequestExample>();
    // ...
}
Para exemplo de CreateProductRequestExample :

Copy code
public class CreateProductRequestExample : IExamplesProvider
{
    public object GetExamples()
    {
        return new CreateProductRequest
        {
            Name = "Product Name",
            Description = "Product Description",
            Price = 10.99m
        };
    }
}
Esses são apenas alguns exemplos de como você pode adicionar um corpo de solicitação (request body) no Swagger. A implementação exata pode variar dependendo da sua configuração do Swagger e da estrutura do seu projeto.




Nelson Neto
Exemplo de headers
Aqui está um exemplo de como você pode adicionar cabeçalhos (headers) em uma requisição no Swagger:

Utilizando o atributo [FromHeader] no parâmetro da sua action:
Copy code
[HttpGet]
public IActionResult Get([FromHeader] string apiKey)
{
    // ...
}
Utilizando o atributo [SwaggerRequestExample] para adicionar um exemplo no swagger:
Copy code
[HttpGet]
[SwaggerRequestExample(typeof(string), typeof(ApiKeyExample))]
public IActionResult Get([FromHeader] string apiKey)
{
    // ...
}
Utilizando o método AddSwaggerExamples para adicionar exemplos no swagger:
Copy code
public void ConfigureServices(IServiceCollection services)
{
    services.AddSwaggerExamplesFromAssemblyOf<ApiKeyExample>();
    // ...
}
Para exemplo de ApiKeyExample :

Copy code
public class ApiKeyExample : IExamplesProvider
{
    public object GetExamples()
    {
        return "api_key_example";
    }
}
Esses são apenas alguns exemplos de como você pode adicionar cabeçalhos (headers) em uma requisição no Swagger. A implementação exata pode variar dependendo da sua configuração do Swagger e da estrutura do seu projeto.

Além disso, é importante que você configure o seu endpoint para lidar com cabeçalhos (headers) nas chamadas de API, caso contrário, o Swagger não será capaz de mostrar corretamente o cabeçalho na sua interface.




Nelson Neto
Exemplo de quero params
Aqui está um exemplo de como você pode adicionar parâmetros na query string em uma requisição no Swagger:

Utilizando o atributo [FromQuery] no parâmetro da sua action:
Copy code
[HttpGet]
public IActionResult Get([FromQuery] string search)
{
    // ...
}
Utilizando o atributo [SwaggerRequestExample] para adicionar um exemplo no swagger:
Copy code
[HttpGet]
[SwaggerRequestExample(typeof(string), typeof(SearchExample))]
public IActionResult Get([FromQuery] string search)
{
    // ...
}
Utilizando o método AddSwaggerExamples para adicionar exemplos no swagger:
Copy code
public void ConfigureServices(IServiceCollection services)
{
    services.AddSwaggerExamplesFromAssemblyOf<SearchExample>();
    // ...
}
Para exemplo de SearchExample:

Copy code
public class SearchExample : IExamplesProvider
{
    public object GetExamples()
    {
        return "example";
    }
}
Esses são apenas alguns exemplos de como você pode adicionar parâmetros na query string em uma requisição no Swagger. A implementação exata pode variar dependendo da sua configuração do Swagger e da estrutura do seu projeto.

Além disso, é importante que você configure o seu endpoint para lidar com parâmetros na query string nas chamadas de API, caso contrário, o Swagger não será capaz de mostrar corretamente o parâmetro na sua interface.




Nelson Neto
Criar classes de testes destas implementações 
Aqui estão alguns exemplos de como você pode criar classes de testes para as implementações de cabeçalhos, parâmetros de consulta e corpo de solicitação no Swagger:

Testando o envio de cabeçalhos (headers):
Copy code
[Fact]
public async Task Get_ShouldReturnOk_WhenApiKeyIsValid()
{
    // Arrange
    var client = _factory.CreateClient();
    client.DefaultRequestHeaders.Add("apiKey", "valid_api_key");
    
    // Act
    var response = await client.GetAsync("/api/values");
    
    // Assert
    Assert.Equal(HttpStatusCode.OK, response.StatusCode);
}
Testando a envio de parâmetros na query string:
Copy code
[Fact]
public async Task Get_ShouldReturnOk_WhenSearchIsValid()
{
    // Arrange
    var client = _factory.CreateClient();
    
    // Act
    var response = await client.GetAsync("/api/values?search=valid_search");
    
    // Assert
    Assert.Equal(HttpStatusCode.OK, response.StatusCode);
}
Testando o envio de corpo de solicitação (request body):
Copy code
[Fact]
public async Task Post_ShouldReturnOk_WhenRequestIsValid()
{
    // Arrange
    var client = _factory.CreateClient();
    var request = new CreateProductRequest
    {
        Name = "Product Name",
        Description = "Product Description",
        Price = 10.99m
    };
    var json = JsonConvert.SerializeObject(request);
    var content = new StringContent(json, Encoding.UTF8, "application/json");
    
    // Act
    var response = await client.PostAsync("/api/products", content);
    
    // Assert
    Assert.Equal(HttpStatusCode.OK, response.StatusCode);
}
Esses são apenas alguns exemplos de como você pode criar classes de testes para as implementações de cabe