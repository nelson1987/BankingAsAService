public class Aluno
{
    public int Id { get; set; }
    public string Nome { get; set; }
    public string Matricula { get; set; }
    public DateTime Inscricao { get; set; }
}

public class Aluno
{
    [BsonId]
    public int Id { get; set; }
    public string Nome { get; set; }
    public string Matricula { get; set; }
    public DateTime Inscricao { get; set; }
}

public class LocalDbContext : DbContext
{
    public DbSet<Aluno> Alunos { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        optionsBuilder.UseSqlServer("Server=(localdb)\\mssqllocaldb;Database=AlunoDb;Trusted_Connection=True;");
    }
}

public class MongoDbContext
{
    private readonly IMongoDatabase _database;

    public MongoDbContext()
    {
        var client = new MongoClient("mongodb://localhost:27017");
        _database = client.GetDatabase("AlunoDb");
    }

    public IMongoCollection<Aluno> Alunos => _database.GetCollection<Aluno>("Alunos");
}

public class CriarAlunoCommand
{
    public string Nome { get; set; }
    public string Matricula { get; set; }
    public DateTime Inscricao { get; set; }
}

public class CriarAlunoCommandHandler : IRequestHandler<CriarAlunoCommand>
{
    private readonly LocalDbContext _context;

    public CriarAlunoCommandHandler(LocalDbContext context)
    {
        _context = context;
    }

    public async Task<Unit> Handle(CriarAlunoCommand request, CancellationToken cancellationToken)
    {
        var aluno = new Aluno
        {
            Nome = request.Nome,
            Matricula = request.Matricula,
            Inscricao = request.Inscricao
        };

        _context.Alunos.Add(aluno);
        await _context.SaveChangesAsync();



Nelson Neto
concluir resposta
Claro, continuando:

Crie as classes de consulta para as operações de leitura no MongoDb:
Copy code
public class ObterAlunoQuery
{
    public int Id { get; set; }
}

public class ObterAlunoQueryHandler : IRequestHandler<ObterAlunoQuery, Aluno>
{
    private readonly MongoDbContext _context;

    public ObterAlunoQueryHandler(MongoDbContext context)
    {
        _context = context;
    }

    public Task<Aluno> Handle(ObterAlunoQuery request, CancellationToken cancellationToken)
    {
        var aluno = _context.Alunos.Find(x => x.Id == request.Id).FirstOrDefaultAsync();
        return aluno;
    }
}
Utilize a fila do RabbitMq para criar um evento de sincronização entre os dois bancos de dados:
Copy code
public class AlunoCriadoEvent : INotification
{
    public int Id { get; set; }
    public string Nome { get; set; }
    public string Matricula { get; set; }
    public DateTime Inscricao { get; set; }
}

public class AlunoCriadoEventHandler : INotificationHandler<AlunoCriadoEvent>
{
    private readonly MongoDbContext _context;

    public AlunoCriadoEventHandler(MongoDbContext context)
    {
        _context = context;
    }

    public Task Handle(AlunoCriadoEvent notification, CancellationToken cancellationToken)
    {
        var aluno = new Aluno
        {
            Id = notification.Id,
            Nome = notification.Nome,
            Matricula = notification.Matricula,
            Inscricao = notification.Inscricao
        };

        _context.Alunos.InsertOne(aluno);
        return Task.CompletedTask;
    }
}
Utilize as classes de comando, consulta e evento para as operações CRUD da entidade Aluno. Lembre-se de configurar o MediatR e o RabbitMq no seu projeto, bem como adicionar as dependências do MongoDb e do SQLServer. É importante também fazer a configuração de injeção de dependência para que os contextos e handlers possam ser injetados corretamente em suas classes.

Este é um exemplo básico de como implementar o padrão CQRS usando diferentes bancos de dados e uma fila de eventos para sincronização. É importante notar que existem diversas outras considerações e melhorias que podem ser feitas, como tratamento de erros, validação de dados, etc.