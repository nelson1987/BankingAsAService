Criar uma consulta Sql que criará uma tabela cartão com as colunas nome impresso, bandeira, e numero
CREATE TABLE cartao (nome_impressao VARCHAR(255), bandeira VARCHAR(255), numero VARCHAR(255));




Nelson Neto
Criar uma procedure que recebera os dados de paginação dessa tabela
CREATE PROCEDURE paginar_cartao(IN pagina INT, IN tamanho_pagina INT)
BEGIN
SELECT * FROM cartao
LIMIT tamanho_pagina OFFSET (pagina - 1) * tamanho_pagina;
END;

Note: This is a basic example of pagination, it could be improved with more detailed query and handling edge cases, such as when the page or page size are less than 1.




Nelson Neto
Nessa procedure poderá ordenar por todas as colunas
CREATE PROCEDURE paginar_cartao(IN pagina INT, IN tamanho_pagina INT, IN coluna_ordenacao VARCHAR(255))
BEGIN
SET @sql = CONCAT('SELECT * FROM cartao ORDER BY ', coluna_ordenacao, ' LIMIT ', tamanho_pagina, ' OFFSET ', (pagina - 1) * tamanho_pagina);
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
END;

This is an example of how you could create a stored procedure that accepts parameters for pagination and sorting. The procedure uses dynamic SQL to construct the query by concatenating the input parameters. The prepared statement is then executed and deallocated to prevent SQL injection.
Keep in mind that you should validate the input parameters in order to prevent SQL injection and errors.




Nelson Neto
Nela poderemos escolher qual coluna será exibida
CREATE PROCEDURE paginar_cartao(IN pagina INT, IN tamanho_pagina INT, IN coluna_ordenacao VARCHAR(255), IN colunas_selecionadas VARCHAR(255))
BEGIN
SET @sql = CONCAT('SELECT ', colunas_selecionadas, ' FROM cartao ORDER BY ', coluna_ordenacao, ' LIMIT ', tamanho_pagina, ' OFFSET ', (pagina - 1) * tamanho_pagina);
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
END;

This is an example of how you could create a stored procedure that accepts parameters for pagination, sorting and selected columns. The procedure uses dynamic SQL to construct the query by concatenating the input parameters. The prepared statement is then executed and deallocated to prevent SQL injection.
Keep in mind that you should validate the input parameters in order to prevent SQL injection and errors. Also, you should check if the column name passed in the parameter exists in the table and if the user has the right to select the specified columns.




Nelson Neto
A ordenação poderá ser crescente para uma coluna e decrescente para outra
CREATE PROCEDURE paginar_cartao(IN pagina INT, IN tamanho_pagina INT, IN coluna_ordenacao_crescente VARCHAR(255), IN coluna_ordenacao_decrescente VARCHAR(255), IN colunas_selecionadas VARCHAR(255))
BEGIN
SET @sql = CONCAT('SELECT ', colunas_selecionadas, ' FROM cartao ORDER BY ', coluna_ordenacao_crescente, ' ASC, ', coluna_ordenacao_decrescente, ' DESC LIMIT ', tamanho_pagina, ' OFFSET ', (pagina - 1) * tamanho_pagina);
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
END;

This is an example of how you could create a stored procedure that accepts parameters for pagination, sorting by two columns, one in ascending and another in descending order and selected columns. The procedure uses dynamic SQL to construct the query by concatenating the input parameters. The prepared statement is then executed and deallocated to prevent SQL injection.
Keep in mind that you should validate the input parameters in order to prevent SQL injection and errors. Also, you should check if the column name passed in the parameters exist in the table and if the user has the right to select the specified columns.
It's also important to validate if the parameters passed are not null, if not, use some default sorting/ordering.




Nelson Neto
Também enviaremos um texto, que será buscado em todas as colunas exibidas na consulta
CREATE PROCEDURE paginar_cartao(IN pagina INT, IN tamanho_pagina INT, IN coluna_ordenacao_crescente VARCHAR(255), IN coluna_ordenacao_decrescente VARCHAR(255), IN colunas_selecionadas VARCHAR(255), IN texto_busca VARCHAR(255))
BEGIN
SET @sql = CONCAT('SELECT ', colunas_selecionadas, ' FROM cartao WHERE ',
(SELECT group_concat(CONCAT(coluna, ' LIKE "%', texto_busca, '%"') SEPARATOR ' OR ')
FROM information_schema.columns
WHERE table_name = 'cartao' and column_name IN (colunas_selecionadas)),
' ORDER BY ', coluna_ordenacao_crescente, ' ASC, ', coluna_ordenacao_decrescente, ' DESC LIMIT ', tamanho_pagina, ' OFFSET ', (pagina - 1) * tamanho_pagina);
PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
END;

This is an example of how you could create a stored procedure that accepts parameters for pagination, sorting by two columns, one in ascending and another in descending order, selected columns and a search text. The procedure uses dynamic SQL to construct the query by concatenating the input parameters. It also uses information_schema to get the column names that are in colunas_selecionadas variable and creates a WHERE clause for the query with a OR operator between the columns using the LIKE operator with the text_busca variable. The prepared statement is then executed and deallocated to prevent SQL injection.
Keep in mind that you should validate the input parameters in order to prevent SQL injection and errors. Also, you should check if the column name passed in the parameters exist in the table and if the user has the right to select the specified columns.
It's also important to validate if the parameters passed are not null, if not, use some default sorting/ordering.




Nelson Neto
Implementar um classe em c#7.0 que utilize essa procedure com dapper
Here is an example of how you could implement a class in C# 7.0 that uses the stored procedure you created earlier with Dapper:

Copy code
using Dapper;
using System;
using System.Data.SqlClient;

public class CartaoRepository
{
    private readonly string _connectionString;

    public CartaoRepository(string connectionString)
    {
        _connectionString = connectionString;
    }

    public IEnumerable<Cartao> Paginar(int pagina, int tamanhoPagina, string colunaOrdenacaoCrescente, string colunaOrdenacaoDecrescente, string colunasSelecionadas, string textoBusca)
    {
        using (var connection = new SqlConnection(_connectionString))
        {
            connection.Open();

            var parametros = new DynamicParameters();
            parametros.Add("@pagina", pagina);
            parametros.Add("@tamanhoPagina", tamanhoPagina);
            parametros.Add("@colunaOrdenacaoCrescente", colunaOrdenacaoCrescente);
            parametros.Add("@colunaOrdenacaoDecrescente", colunaOrdenacaoDecrescente);
            parametros.Add("@colunasSelecionadas", colunasSelecionadas);
            parametros.Add("@textoBusca", textoBusca);
        return connection.Query<Cartao>("paginar_cartao", parametros, commandType: CommandType.StoredProcedure);
    }
}
}